//------------------------------------------------------------------------------
// Solver.h
//
// Group: Group 13604, study assistant Philip Loibl
//
// Authors: Thomas Eckstein 1530679
// Sp√∂cklberger Johannes 1531135
// Tatjana Baier 1530003
//------------------------------------------------------------------------------
//

#ifndef SOLVER_H
#define SOLVER_H

#include <deque>
#include <vector>

using std::deque;
using std::vector;

//------------------------------------------------------------------------------
// Using direction class.
//
class Direction;

//------------------------------------------------------------------------------
// Using player class.
//
class Player;

//------------------------------------------------------------------------------
// Using level class.
//
class Level;

//------------------------------------------------------------------------------
// Using map class.
//
class Map;

//------------------------------------------------------------------------------
// Stores how often a player has been on a field.
//
class Solver
{
private:

  //----------------------------------------------------------------------------
  // The level to be solved.
  //
  Level* level_;

  //----------------------------------------------------------------------------
  // Width of the map - for more efficient access.
  //
  int size_x_;

  //----------------------------------------------------------------------------
  // Height of the map - for more efficient access.
  //
  int size_y_;

  //----------------------------------------------------------------------------
  // Two dimensional array of player pointers - Represents the map.
  //
  Player*** players_;

  //----------------------------------------------------------------------------
  // One half of the queue containing the players.
  //
  deque<Player*> queue_player_;

  //----------------------------------------------------------------------------
  // Other half of the queue containing the directions.
  //
  deque<Direction*> queue_direction_;

  //----------------------------------------------------------------------------
  // Lays 4 players on the queue each facing in another direction.
  // @param player The player.
  //
  inline void push4(Player* player);

  //----------------------------------------------------------------------------
  // Stores this player to the array map.
  // @param player The player.
  //
  inline void store(Player* player);

  //----------------------------------------------------------------------------
  // Returns the player that occupies the given players position on the map.
  // @param player The player.
  //
  inline Player* get(Player* player);

  //----------------------------------------------------------------------------
  // Default constructor - Should not be used.
  //
  Solver() = delete;

  //----------------------------------------------------------------------------
  // Private copy constructor - Should not be used.
  //
  Solver(Solver &);

public:

  //----------------------------------------------------------------------------
  // Creates a new instance.
  // @param level The level to be solved.
  //
  Solver(Level* level);

  //----------------------------------------------------------------------------
  // Tries to solve the given level.
  // @return Returns a list of moves needed to solve the level. Returns nullptr
  //         if no path is found.
  //
  vector<Direction*>* solve();

  //----------------------------------------------------------------------------
  // Deletes this instance.
  //
  ~Solver();
};

#endif
