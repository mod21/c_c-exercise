//------------------------------------------------------------------------------
// Solver.cpp
//
// Group: Group 13604, study assistant Philip Loibl
//
// Authors: Thomas Eckstein 1530679
// SpÃ¶cklberger Johannes 1531135
// Tatjana Baier 1530003
//------------------------------------------------------------------------------
//

#include "Direction.h"
#include "Field.h"
#include "Level.h"
#include "Map.h"
#include "Player.h"
#include "Solver.h"

//------------------------------------------------------------------------------
Solver::Solver(Level* level) : level_(level),
  size_x_(level->getMap()->getSizeX()), size_y_(level->getMap()->getSizeY()),
  players_(new Player**[size_x_]), queue_(queue<pair<Player*, Direction*>>())
{
  for (int column = 0; column < size_x_; column++)
  {
    Player** column_array = new Player*[size_y_];
    for (int row = 0; row < size_y_; row++)
    {
      column_array[row] = nullptr;
    }
    players_[column] = column_array;
  }
}

//------------------------------------------------------------------------------
inline void Solver::push4(Player* player)
{
  queue_.push(pair<Player*, Direction*>(new Player(*player), Direction::UP));
  queue_.push(pair<Player*, Direction*>(new Player(*player), Direction::DOWN));
  queue_.push(pair<Player*, Direction*>(new Player(*player), Direction::LEFT));
  queue_.push(pair<Player*, Direction*>(new Player(*player), Direction::RIGHT));
}

//------------------------------------------------------------------------------
inline void Solver::store(Player* player)
{
  CoordPair position = player->getPosition();
  Player** column = players_[position.getX()];
  Player* old = column[position.getY()];
  if (old)
  {
    delete old;
  }
  column[position.getY()] = player;
}

//------------------------------------------------------------------------------
inline Player* Solver::get(Player* player)
{
  CoordPair position = player->getPosition();
  return players_[position.getX()][position.getY()];
}

//------------------------------------------------------------------------------
vector<Direction*>* Solver::solve()
{
  Player* original = new Player(*(level_->getPlayer()));
  int original_steps = original->getHistory().size();
  store(original);
  push4(original);
  while (queue_.size())
  {
    pair<Player*, Direction*> current_pair = queue_.front();
    Player* current = current_pair.first;
    queue_.pop();
    bool icecounter = current->isIceCounter();
    if (!current->hasStepsLeft() || !current->step(current_pair.second, true))
    {
      delete current;
      continue;
    }
    Player* other = get(current);
    if (!icecounter && other != nullptr &&
      other->getRemainingSteps() >= current->getRemainingSteps())
    {
      delete current;
      continue;
    }
    push4(current);
    if(!icecounter && !current->isIceCounter())
    {
      store(current);
    }
    else
    {
      delete current;
    }
  }
  CoordPair finish = level_->getMap()->getFieldPosition(Field::FINISH);
  Player* finished = players_[finish.getX()][finish.getY()];
  if (finished == nullptr)
  {
    return nullptr;
  }
  vector<Direction*>* history = new vector<Direction*>(finished->getHistory());
  for (int index = original_steps; index > 0; index--)
  {
    history->erase(history->begin());
  }
  return history;
}

//------------------------------------------------------------------------------
Solver::~Solver()
{
  for (int column = 0; column < size_x_; column++)
  {
    Player** column_array = players_[column];
    for (int row = 0; row < size_y_; row++)
    {
      if (column_array[row])
      {
        delete column_array[row];
      }
    }
    delete column_array;
  }
  delete players_;
}
